plugins {
    id 'java'
    id 'net.neoforged.gradle.userdev' version '7.0.173'
    id 'com.gradleup.shadow' version '8.3.1'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.ALL
}

version = mod_version
group = mod_group_id

base {
    archivesName.set(mod_id)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '-Dfile.encoding=UTF-8'
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    clientData {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "it.unimi.dsi:fastutil:8.5.6"
    implementation "com.lmax:disruptor:3.4.4"
    implementation "org.agrona:agrona:1.17.0"
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.8"
    implementation "io.dropwizard.metrics:metrics-core:4.2.14"
    implementation "org.hdrhistogram:HdrHistogram:2.1.12"
    runtimeOnly    "com.lmax:disruptor:3.4.4"
}

tasks.withType(ProcessResources).configureEach {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}

shadowJar {
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    minimize()
    archiveClassifier.set('')
    mergeServiceFiles()
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/LICENSE*'
}

afterEvaluate {
    tasks.register('injectFatJar') {
        dependsOn shadowJar
        doLast {
            def modsDir = file("$buildDir/runs/client/mods")
            modsDir.deleteDir()
            modsDir.mkdirs()
            copy {
                from tasks.named('shadowJar').get().archiveFile.get().asFile
                into modsDir
                rename { "${project.name}-${project.version}.jar" }
            }
        }
    }

    tasks.named('runClient', JavaExec).configure {
        dependsOn tasks.named('injectFatJar')
    }

    tasks.named('runServer', JavaExec).configure {
        dependsOn tasks.named('injectFatJar')
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}