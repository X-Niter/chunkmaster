plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.173'
    id 'com.gradleup.shadow' version '8.3.1'
}

base {
    archivesName = mod_id
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources', 'src/generated/resources']
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "it.unimi.dsi:fastutil:8.5.6"
    implementation "com.lmax:disruptor:3.4.4"
    implementation "org.agrona:agrona:1.17.0"
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.8"
    implementation "io.dropwizard.metrics:metrics-core:4.2.14"
    implementation "org.hdrhistogram:HdrHistogram:2.1.12"
    runtimeOnly "com.lmax:disruptor:3.4.4"
    implementation project(':io')
}

shadowJar {
    from sourceSets.main.output
    configurations = [ project.configurations.runtimeClasspath ]
    minimize()
    archiveClassifier.set('')
    mergeServiceFiles()
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/LICENSE*'
}

tasks.named('jar') { enabled = false }

runs.all {
    workingDirectory = file("run/${name}")
    modSources.from(sourceSets.main)
}

afterEvaluate {
    tasks.register('injectFatJar') {
        dependsOn shadowJar
        doLast {
            def modsDir = file("$buildDir/runs/client/mods")
            modsDir.deleteDir()
            modsDir.mkdirs()
            copy {
                from tasks.named('shadowJar').get().archiveFile.get().asFile
                into modsDir
                rename { "${project.name}-${project.version}.jar" }
            }
        }
    }

    tasks.named('runClient', JavaExec).configure {
        dependsOn tasks.named('injectFatJar')
    }

    tasks.named('runServer', JavaExec).configure {
        dependsOn tasks.named('injectFatJar')
    }
}

tasks.withType(ProcessResources).configureEach {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}
